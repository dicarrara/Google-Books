{"version":3,"sources":["utils/API.js","components/Jumbotron/index.js","components/Grid/index.js","components/SavedResult/index.js","pages/SaveBooks.js","components/SearchForm/index.js","components/SearchResult/index.js","pages/SearchBooks.js","pages/NoMatch.js","components/Nav/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["API","getGoogleSearchBooks","query","axios","get","getBooks","getBook","id","saveBook","savedBooks","post","deleteBook","delete","Jumbotron","_ref","children","react_default","a","createElement","className","Container","fluid","concat","Row","_ref2","Col","_ref3","size","split","map","join","SavedResult","props","length","savedbook","title","key","_id","src","image","alt","authors","description","onClick","handleDeleteButton","href","link","SaveBook","state","then","res","_this","componentDidMount","catch","err","console","log","_this2","this","setState","data","components_Jumbotron","components_SavedResult","Component","SearchForm","value","search","type","name","placeholder","onChange","handleInputChange","handleFormSubmit","SearchResult","books","book","author","event","handleSavedButton","SearchBooks","error","message","target","preventDefault","items","Error","results","result","volumeInfo","imageLinks","thumbnail","infoLink","filter","alert","components_SearchForm","components_SearchResult","NoMatch","role","aria-label","Nav","Footer","App","react_router_dom","components_Nav","react_router","exact","path","component","SaveBooks","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.463dbb3a.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nexport default {\r\n    // Get book from google search \r\n    getGoogleSearchBooks: function(query) {\r\n        return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + query)\r\n    },\r\n\r\n    // Gets all books\r\n    getBooks: function () {\r\n        return axios.get(\"/api/books\");\r\n    },\r\n\r\n    // Gets the book with the given id\r\n    getBook: function (id) {\r\n        return axios.get(\"/api/books/\" + id);\r\n    },\r\n\r\n    // Saves a book to the database\r\n    saveBook: function (savedBooks) {\r\n        return axios.post(\"/api/books\", savedBooks);\r\n    },\r\n\r\n    // Deletes the book with the given id\r\n    deleteBook: function (id) {\r\n        return axios.delete(\"/api/books/\" + id);\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron({ children }) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid d-flex align-items-center\">\r\n            <div className=\"container text-center\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport \"./style.css\"\r\nimport {Row, Col} from \"../Grid\"\r\n\r\nconst SavedResult = props => {\r\n    return (props.savedBooks.length === 0) ? (\r\n        <div className=\"card\">\r\n            <div className=\"card-body player\">\r\n                <div className=\"article\">\r\n                    <h3>Books that You Saved</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ):(\r\n        <div className=\"card\">\r\n            <div className=\"card-body player\">\r\n                <div className=\"article\">\r\n                    <h3>Books that You Saved</h3>\r\n                    {props.savedBooks.map(savedbook => {\r\n                        return (\r\n                            <li className=\"saved-list list-group-item\">\r\n                                <Row className=\"SearchResult\" id={savedbook.title + \"Card\"} key={savedbook._id}>\r\n                                    {/* col-3 show image of the book */}\r\n                                    <Col size=\"2\" className=\"bookImage\">\r\n                                        <img src={savedbook.image} alt={savedbook.title} />\r\n                                    </Col>\r\n                                    <Col size=\"1\" className=\"emptyCol\"/>\r\n                                    {/* col-9 show information of the book */}\r\n                                    <Col size=\"9\" className=\"bookInfo\">\r\n                                        <Row>\r\n                                            <h2 className=\"bookTitle\">{savedbook.title}</h2>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <h3 className=\"bookAuthor\">{savedbook.authors}</h3>\r\n                                        </Row>\r\n                                        <Row>\r\n                                            <p className=\"bookDescription\">{savedbook.description}</p>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n                                <br></br>\r\n                                <Row className=\"buttonDiv \">\r\n                                    <button className=\"deleteBook btn btn-danger\" id={savedbook._id} onClick={() => props.handleDeleteButton(savedbook._id)}>\r\n                                        Delete Book\r\n                                    </button>\r\n                                    <a href={savedbook.link}>\r\n                                        <button className=\"viewBook btn btn-success\">\r\n                                            View Book\r\n                                        </button>\r\n                                    </a>\r\n                                </Row>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default SavedResult","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { Container} from \"../components/Grid\";\r\nimport SavedResult from \"../components/SavedResult\"\r\n\r\nclass SaveBook extends Component {\r\n    state = {\r\n        savedBooks: []\r\n    };\r\n\r\n    //when this component mounts, grab all books that were save to the database \r\n    componentDidMount() {\r\n        API.getBooks()\r\n            .then(res => this.setState({ savedBooks: res.data }))\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    //function to remove book by id\r\n    handleDeleteButton = id => {\r\n        API.deleteBook(id)\r\n            .then(res => this.componentDidMount())\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"container\">\r\n                <Jumbotron />\r\n                <Container>\r\n                    <SavedResult savedBooks={this.state.savedBooks} handleDeleteButton={this.handleDeleteButton} />\r\n                </Container>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SaveBook ","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst SearchForm = props => {\r\n    return (\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label className=\"BookSearchLabel\"><h3>Search For Book</h3></label>\r\n                <br></br>\r\n                <input className=\"col-12 form-control\"\r\n                    value={props.search}\r\n                    type=\"text\"\r\n                    name=\"searchBook\"\r\n                    placeholder=\"Enter Book's Name\"\r\n                    onChange={props.handleInputChange}\r\n                />\r\n            </div>\r\n            <button type=\"submit\" className=\"submitBtn btn btn-primary\" onClick={props.handleFormSubmit}>\r\n                Submit\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default SearchForm","import React from \"react\";\r\nimport \"./style.css\";\r\nimport {Row, Col} from \"../Grid\"\r\n\r\nconst SearchResult = props => {\r\n    return (props.books.length === 0) ? (\r\n        <div className=\"card\">\r\n            <div className=\"card-body player\">\r\n                <div className=\"article\">\r\n                    <h3>Search Results</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    ) : (\r\n            <div className=\"card\">\r\n                <div className=\"card-body player\">\r\n                    <div className=\"article\">\r\n                        <h3>Search Results</h3>\r\n                        {props.books.map(book => {\r\n                            return (\r\n                                <li className=\"search-list list-group-item\">\r\n                                    <Row className=\"SearchResult row\" id={book.title + \"Card\"} key={book._id}>\r\n                                        {/* col-3 show image of the book */}\r\n                                        <Col size=\"2\" className=\"bookImage\">\r\n                                            <img src={book.image} alt={book.title} />\r\n                                        </Col>\r\n                                        <Col size=\"1\" className=\"emptyCol\"/>\r\n                                        {/* col-9 show information of the book */}\r\n                                        <Col size=\"9\" className=\"bookInfo\">\r\n                                            <Row>\r\n                                                <h3 className=\"bookTitle\">{book.title}</h3>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <h4 className=\"bookAuthor\">{book.author}</h4>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <p className=\"bookDescription\">{book.description}</p>\r\n                                            </Row>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <br></br>\r\n                                    <Row className=\"buttonDiv \">\r\n                                        <button className=\"saveBook btn btn-primary\" id={book.id} onClick={(event) => props.handleSavedButton(event)}>\r\n                                            Save Book\r\n                                        </button>\r\n                                        <a href={book.link}>\r\n                                            <button className=\"viewBook btn btn-success\">\r\n                                                View Book\r\n                                        </button>\r\n                                        </a>\r\n                                    </Row>\r\n                                </li>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\nexport default SearchResult","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport { Container, Row, Col } from \"../components/Grid\";\r\nimport SearchForm from \"../components/SearchForm\";\r\nimport SearchResult from \"../components/SearchResult\"\r\n\r\n\r\nclass SearchBooks extends Component {\r\n    //create state\r\n    state = {\r\n        search: \"\",\r\n        books: [],\r\n        error: \"\",\r\n        message: \"\"\r\n    };\r\n\r\n    //function to take value of what enter in the search bar\r\n    handleInputChange = event => {\r\n        this.setState({ search: event.target.value })\r\n    }\r\n\r\n    //function to control the submit button of the search form \r\n    handleFormSubmit = event => {\r\n        event.preventDefault();\r\n        // once it clicks it connects to the google book api with the search value\r\n        API.getGoogleSearchBooks(this.state.search)\r\n            .then(res => {\r\n                if (res.data.items === \"error\") {\r\n                    throw new Error(res.data.items);\r\n                }\r\n                else {\r\n                    // store response in a array\r\n                    let results = res.data.items\r\n                    //map through the array \r\n                    results = results.map(result => {\r\n                        //store each book information in a new object \r\n                        result = {\r\n                            key: result.id,\r\n                            id: result.id,\r\n                            title: result.volumeInfo.title,\r\n                            author: result.volumeInfo.authors,\r\n                            description: result.volumeInfo.description,\r\n                            image: result.volumeInfo.imageLinks.thumbnail,\r\n                            link: result.volumeInfo.infoLink\r\n                        }\r\n                        return result;\r\n                    })\r\n                    // reset the sate of the empty books array to the new arrays of objects with properties geting back from the response\r\n                    this.setState({ books: results, error: \"\" })\r\n                }\r\n            })\r\n            .catch(err => this.setState({ error: err.items }));\r\n    }\r\n\r\n    handleSavedButton = event => {\r\n        // console.log(event)\r\n        event.preventDefault();\r\n        console.log(this.state.books)\r\n        let savedBooks = this.state.books.filter(book => book.id === event.target.id)\r\n        savedBooks = savedBooks[0];\r\n        API.saveBook(savedBooks)\r\n            .then(this.setState({ message: alert(\"Your book is saved\") }))\r\n            .catch(err => console.log(err))\r\n    }\r\n    render() {\r\n        return (\r\n            <Container fluid>\r\n                <Jumbotron>\r\n                    <h1 className=\"text-white\">Find Your Favorite Books with GoogleBook API</h1>\r\n                </Jumbotron>\r\n                <Container>\r\n                    <Row>\r\n                        <Col size=\"12\">\r\n                            <SearchForm\r\n                                handleFormSubmit={this.handleFormSubmit}\r\n                                handleInputChange={this.handleInputChange}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <br></br>\r\n                <Container>\r\n                    <SearchResult books={this.state.books} handleSavedButton={this.handleSavedButton} />\r\n                </Container>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default SearchBooks","import React from \"react\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nfunction NoMatch() {\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col size=\"md-12\">\r\n          <Jumbotron>\r\n            <h1 className=\"text-white\">404 Page Not Found</h1>\r\n            <h1>\r\n              <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\r\n                🙄\r\n              </span>\r\n            </h1>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NoMatch;","import React from \"react\";\r\n\r\nfunction Nav() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-primary bg-primary\">\r\n            <a className=\"navbar-brand\" href=\"/\">\r\n                <h2 className=\"text-white\">Google Book Search</h2>\r\n            </a>\r\n            <div id=\"navbarNav\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\" id=\"home\">\r\n                        <a className=\"nav-link\" href=\"/\"><button type=\"button\" className=\"btn btn-info text-white\">Search Books</button></a>\r\n                    </li>\r\n                    <li className=\"nav-item\" id=\"report\">\r\n                        <a className=\"nav-link\" href=\"/saved\"><button type=\"button\" className=\"btn btn-warning text-white\">Saved Books</button></a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Footer = () => (\r\n\t<footer className = \"page-footer\">\r\n\t\t<div className = \"container-fluid text-center\">\r\n\t\t\t<p>Diana Carrara</p>\r\n\t\t</div>\t\r\n\t</footer>\r\n);\r\n\r\nexport default Footer;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport SaveBooks from \"./pages/SaveBooks\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Nav from \"./components/Nav\";\nimport Footer from \"./components/Footer\"\nimport \"./App.css\"\n\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Nav />\n        <Switch>\n          <Route exact path=\"/\" component={SearchBooks} />\n          <Route exact path=\"/saved\" component={SaveBooks} />\n          <Route exact path=\"/saved/:id\" component={SaveBooks} />\n          <Route component={NoMatch} /> \n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}